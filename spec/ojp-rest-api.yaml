openapi: 3.0.3
info:
  title: OJP REST API
  description: The Open Journey Planner (OJP) as a REST service.
  contact:
    name: Andreas Schlapbach
    email: andreas.schlapbach@sbb.ch
    url: https://github.com/schlpbch/ojp-rest-api
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
tags:
  - name: Place Information
    description: resource to search for place information (aka. location)
  - name: Trips
    description: resource to search for trips
paths:
  /place-informations:
    post:
      tags:
        - Place Information
      summary: returns trips for a given OJP place information request
      description: >-
        Returns place information for a given place information request based on the OJP specification.
      operationId: postPlaceInformations
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/accessToken"
        - name: ParentSpanId
          in: header
          description: >-
            64-bit parent span ID lower-hex encoded into 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: SpanId
          in: header
          description: >-
            64-bit span ID lower-hex encoded into 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: TraceId
          in: header
          description: >-
            128 or 64-bit trace ID lower-hex encoded into 32 or 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string

      requestBody:
        description: request for place information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaceInformationRequest"
      responses:
        "200":
          description: place information found matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceInformationResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          description: internal server error
          content:
            "application/problem+json":
              schema:
                $ref: "#/components/schemas/Problem"
        "501":
          description: not implemented
        "503":
          description: service unavailable
  /trips:
    post:
      tags:
        - Trips
      summary: returns trips for a given OJP trip request
      description: >-
        Returns trips for a given trip request based on the OJP specification.
      operationId: postTrips
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/accessToken"
        - name: ParentSpanId
          in: header
          description: >-
            64-bit parent span ID lower-hex encoded into 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: SpanId
          in: header
          description: >-
            64-bit span ID lower-hex encoded into 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: TraceId
          in: header
          description: >-
            128 or 64-bit trace ID lower-hex encoded into 32 or 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string

      requestBody:
        description: request for trips
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TripRequest"
      responses:
        "200":
          description: trips found matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no trips found
        "500":
          description: internal server error
          content:
            "application/problem+json":
              schema:
                $ref: "#/components/schemas/Problem"
        "501":
          description: not implemented
        "503":
          description: service unavailable

components:
  parameters:
    acceptLanguage:
      name: Accept-Language
      in: header
      description: >-
        Describes the set of natural languages that are preferred for localized text in
        the response to the request (see RFC2616-sec14.4).
      required: false
      style: simple
      explode: false
      schema:
        type: string

    accessToken:
      name: Access-Token
      in: header
      description: >-
        OAuth2 token used to authenticate the consumer API. Refer to the implementation
        documentation for information on how to get a token.
      required: true
      style: simple
      explode: false
      schema:
        type: string

  schemas:
    ## CHECKED
    PlaceInformationRequest: ## OJP Place Information
      allOf:
        - oneOf: 
          - $ref: "#/components/schemas/InitialPlaceInput"
          - $ref: "#/components/schemas/PlaceRefStructure"
        - type: object
          properties:
            restrictions:
              $ref: "#/components/schemas/PlaceParam"
            # extensions:

    # CHECKED
    PlaceParam:
      description: >-
        More parameters for restricting the request.
      allOf:  # Easy fix: inline PlacePolicy
#        - $ref: "#/components/schemas/PlaceDataFilter"   # Out of scope
        - $ref: "#/components/schemas/PlacePolicy"
        
    ## CHECKED
    PlacePolicy:
      properties:
        #language:   # Not supported, language shall be set in header
        #  type: string
        numberOfResults:
          description: >-
            Maximum number of results to be returned. The service is allowed to return fewer objects if reasonable
            or otherwise appropriate.
          type: number
          format: int32
          minimum: 1
        #continueAt:   # Out of scope
        #  type: number
        #  format: int32
        #includePtModes:    # Out of scope
        #  type: boolean


    ## CHECKED
    InitialPlaceInput:
      type: object
      properties:
        initialInput:
          anyOf:
            - $ref: "#/components/schemas/Name"
            - $ref: "#/components/schemas/LocationStructure"
  #         - $ref: "#/components/schemas/GeoRestriction"   # Out of scope
  #         - $ref: "#/components/schemas/AllowedSystemId"    # Out of scope

    ## CHECKED
    Name:
      description: >-
        Name of the place object which is looked after. This is usually the user's input. If not given,
        the name of the resulting place objects is not relevant.
      type: object
      properties:
        name:
          type: string
          example: "Bern Bärengraben"

    ## CHECKED
    PlaceInformationResponse:
      type: object
      properties:
        # placeInformationResponseContext:   # Out of scope
        #   $ref: "#/components/schemas/PlaceContext"
        # continueAt:   # Ouf of scope
        #   type: string
        placeResults:
          type: array
          items:
            $ref: "#/components/schemas/PlaceResult"

    ## CHECKED
    PlaceResult:
      type: object
      required:
        - results
        - complete
      properties:
        place:
          $ref: "#/components/schemas/Place"  
        complete:
          description: >-
            States whether the included place is complete or needs further refinement. Only complete places
            are fully resolved and can be used in e.g. trip requests. Incomplete places have to be refined 
            entering them once again into a PlaceInformationRequest.
          type: boolean
        probability:
          description: >-
            Probability, that this result is the one meant by the user's input. Value should be between 0 and 1.
          type: number
          format: float
          minimum: 0.0
          maximum: 1.0
        modes:
          description:
            List of transport modes that call at this place object. This list should only be filled in case of
            stop points or stop places – and only when explicitly requested.
          type: array
          items:
            $ref: "#/components/schemas/Mode"

    ## TripRequest
    ## CHECKED
    TripRequest: 
      required:
        - destination
        - origin
      type: object
      properties:
        # Array out of Scope
        origin:
          description: >-
            Specifies the origin situation from where the user wants to start.
          $ref: "#/components/schemas/PlaceContext"
        # Array out of Scope
        destination:
          description: >-
            Specifies the destination situation where the user is heading to.
          $ref: "#/components/schemas/PlaceContext"
        # Array out of Scope
        via:
          description: >-
            Ordered series of points where the journey must pass through. If more
            than one via point is given all of them must be obeyed - in the correct
            order. The server is allowed to replace a via stop by equivalent stops.
          type: array
          items:
            $ref: "#/components/schemas/TripVia"
        # notVia:   # Out of scope
        #   description: >-
        #     Not-via restrictions for a TRIP, i.e. SCHEDULED STOP POINTs or STOP PLACEs
        #     that the TRIP is not allowed to pass through. If more than one not via point 
        #     is given all of them must be obeyed.
        #   oneOf:
        #     - $ref: "#/components/schemas/StopPointRef"
        #     - $ref: "#/components/schemas/StopPlaceRef"
        # noChangesAt:   # Out of scope
        #   description: >-
        #     No-change-at restrictions for a TRIP, i.e. SCHEDULED STOP POINTs or STOP PLACEs 
        #     at which no TRANSFER is allowed within a TRIP
        #   oneOf:
        #     - $ref: "#/components/schemas/StopPointRef"
        #     - $ref: "#/components/schemas/StopPlaceRef"
        params:
          description: >-
            Options to control the search behaviour and response contents.
          $ref: "#/components/schemas/TripParam"


    DepArrTimeStructure:
      type: object
      properties:
        depArrTime:
          type: string
          format: date-time
      required:
        - depArrTime

    TimeAllowanceStructure:
      type: object
      properties:
        timeAllowance:
          type: string
          format: duration
          example: "120S"
      required:
        - timeAllowance

    PlacePlaceStructure:
      oneOf:
        - $ref: "#/components/schemas/PlaceRefStructure"
        - $ref: "#/components/schemas/TripPlaceStructure"

    PlaceTimeStructure:
      oneOf:
        - $ref: "#/components/schemas/DepArrTimeStructure"
        - $ref: "#/components/schemas/TimeAllowanceStructure"

    ## CHECKED
    PlaceContext:
      type: object
      # NOTICE: there is a bug in the Swagger-UI which prevents
      # the correct structure to pop up when selecting.
      # This should without the place and time layer.
      properties:
        place:
          $ref: "#/components/schemas/PlacePlaceStructure"
        time:
          $ref: "#/components/schemas/PlaceTimeStructure"
        # individualTransportOptions:
        # - $ref: "#/components/schemas/IndividualTransportOptions"
      required:
        - place

    ## CHECKED
    # PlaceContext:
      # NOTICE: there is a bug in the Swagger-UI which prevents
      # the correct structure to pop up when selecting.
      # allOf:
        # - $ref: "#/components/schemas/PlacePlaceStructure"
        # - $ref: "#/components/schemas/PlaceTimeStructure"
        # individualTransportOptions:
        # - $ref: "#/components/schemas/IndividualTransportOptions"



    StopPointRefStructure:
      type: object
      required:
        - stopPointRef
      properties:
        stopPointRef:
          $ref: "#/components/schemas/StopPointRef"

    StopPlaceRefStructure:
      type: object
      required:
        - stopPlaceRef
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/StopPlaceRef"

    GeoPositionStructure:
      type: object
      required:
        - geoPosition
      properties:
        geoPositionRef:
          $ref: "#/components/schemas/LocationStructure"

    TopographicPlaceRefStructure:
      type: object
      required:
        - topographicPlaceRef
      properties:
        topographicPlaceRef:
          $ref: "#/components/schemas/TopographicPlaceRef"

    PointOfInterestRefStructure:
      type: object
      required:
        - pointOfInterestRef
      properties:
        pointOfInterestRef:
          $ref: "#/components/schemas/PointOfInterestRef"

    AddressRefStructure:
      type: object
      required:
        - addressRef
      properties:
        addressRef:
          $ref: "#/components/schemas/AddressRef"

    LocationNameStructure:
      type: object
      required:
        - locationName
      properties:
        locationName:
          type: string
          example: Bern

    PlaceRefStructure:
      type: object
      required:
        - placeRef
      properties:
        placeRef:
          $ref: "#/components/schemas/PlaceRef"

    ## CHECKED
    PlaceRef:
      description: >-
        Reference to a geographic PLACE of any type which may be specified as the origin or destination of a trip.
      allOf:
        - oneOf:
          - $ref: "#/components/schemas/StopPointRefStructure"
          - $ref: "#/components/schemas/StopPlaceRefStructure"
          - $ref: "#/components/schemas/GeoPositionStructure"
          - $ref: "#/components/schemas/TopographicPlaceRefStructure"
          - $ref: "#/components/schemas/PointOfInterestRefStructure"
          - $ref: "#/components/schemas/AddressRefStructure"
        - $ref: "#/components/schemas/LocationNameStructure"

    ## CHECKED
    TripVia:
      description: >-
        Via restriction for a trip.
      required:
        - viaPoint 
      properties:
        viaPoint:
          $ref: "#/components/schemas/PlaceRef"
        dwellTime:
          type: string
          format: duration
          example: "30S"

    TripPlaceStructure:
      type: object
      properties:
        tripPlace:
          $ref: "#/components/schemas/TripPlace"
      required:
        - tripPlace

    ## CHECKED
    TripPlace:
      description: >-
        A trip place represents the current logical position of a journey service. It can be 
        used similarly to a place e.g. for starting a new trip requests from within this service. 
        A trip place does not(!) describe the relative position of a traveller within a vehicle, 
        e.g. the seat.
      type: object
      required:
        - operatingDayRef
        - journeyRef
      properties:
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        journeyRef:
          $ref: "#/components/schemas/JourneyRef"

    ## CHECKED
    BaseTripPolicyFilter:
      type: object
      properties:        
        noSingleStep:
          description: The user is not able to climb one step.
          type: boolean
          default: false
        noStairs:
          description: The user is not able to walk up/down stairs.
          type: boolean
          default: false
        noEscalator:
          type: boolean
          description: The user is not able to use an escalator.
          default: false
        noElevator:
          type: boolean
          description: The user is not able to use an elevator.
          default: false
        noRamp:
          type: boolean
          description: The user is not able to use an ramp.
          default: false
        noSight:
          type: boolean
          description: The user is not able to see.
          default: false

    ## CHECKED
    TripMobilityFilter:
      type: object
      properties:
        levelEntrance:
          description: >-
            The user needs vehicles with level entrance between platform and vehicle, f.e. 
            for wheelchair access.
          type: boolean
          default: false
        bikeTransport:
          description: >-
            The user wants to carry a bike on public transport.
          type: boolean
          default: false
        walkSpeed:
          description: >-
            Deviation from average walk speed in percent. 100% percent is average speed. 
            Less than 100 % slower, Greater than 150% faster.
          type: number
          format: uint8
          default: 100
        additionalTransferTime:
          description: >-
            Additional time added to all transfers (also to transfers between individual to
            public transport).
          type: string
          format: duration
          example: 0S

    ## CHECKED
    NumberOfResultsGroup:
      type: object
      properties:        
        numberOfResultsBefore:
          type: number
          format: int32
          default: 0 
        numberOfResultsAfter:
          type: number
          format: int32
          default: 5
      required:
        - numberOfResultsBefore
        - numberOfResultsAfter

    ## CHECKED
    BaseTripPolicy:
      type: object
      allOf:
        - oneOf:
          - type: object
            properties:
              numberOfResults:
                type: number
                format: uint8
                default: 1
          - $ref: "#/components/schemas/NumberOfResultsGroup"
        - type: object
          properties:
            ignoreRealtimeData:
              type: boolean
              default: false

    ## CHECKED
    TripPolicy:
      type: object
      properties:        
        transferLimit:
          description: The maximum number of interchanges the user will accept per trip.
          type: number
          format: int8
          minimum: 0 
        optimisationMethod:
          $ref: "#/components/schemas/OptimisationMethod"
        itModesToCover:
          $ref: "#/components/schemas/IndividualMode"

    ## CHECKED
    OptimisationMethod:
      description: >-
        the types of algorithm that can be used for planning a journey (fastest, least walking, etc).
      type: string
      enum:
        - FASTEST
        - MIN_CHANGES
        - LEAST_WALKING
        - LEAST_COST
        - EARLIEST_ARRIVAL 
        - LATEST_DEPARTURE 
        - EARLIEST_ARRIVAL_AND_LATEST_DEPARTURE
      default: FASTEST

    ## CHECKED
    TripParam:
      description: 
        Options to control the search behaviour and response contents.
      allOf:
        # OOS - $ref: "#/components/schemas/TripDataFilter"
        - $ref: "#/components/schemas/BaseTripPolicyFilter"
        - $ref: "#/components/schemas/TripMobilityFilter"
        - $ref: "#/components/schemas/BaseTripPolicy"
        - $ref: "#/components/schemas/TripPolicy"
        # OOS - $ref: "#/components/schemas/BaseTripContentFilter"
        # OOS - $ref: "#/components/schemas/TripContentFilter"
        # OOS - $ref: "#/components/schemas/FareParam"

    ## Trip Response
    ## CHECKED
    TripResponse:
      required:
        - tripResult
      type: object
      properties:
        calcTime:
          type: integer
          minimum: 0
        # TODO: Implement this if you understand what it is.
        # tripResponseContext:
        #  $ref: "#/components/schemas/ResponseContext"
        tripResult:
          $ref: "#/components/schemas/TripResult"

    ## CHECKED
    TripResult:
      description: The trip results found by the server
      allOf:
        - type: object
          properties:
            resultId:
              description: >-
                Id of this trip result for referencing purposes. Unique within trip response.
              type: string
              format: uuid
          required:
            - resultId
        - $ref: "#/components/schemas/ErrorMessage"
        - oneOf:
          - $ref: "#/components/schemas/Trip"
          - $ref: "#/components/schemas/TripSummary"
        # OOS - $ref: "#/components/schemas/TripFare" 

    ## CHECKED
    ErrorMessage:
      type: object
      properties:
        code:
          type: string
        text:
          type: string
      required:
        - code

    Trip:
      description: A complete trip from origin to destination
      type: object
      required:
        - tripId
        - duration
        - startTime
        - endTime
        - transfers
        - tripLegs
      properties:
        tripId:
          description: >-
            Id of this trip for referencing purposes. Unique within trip response.
          type: string
          format: uuid
        duration:
          description: Overall duration of the trip
          type: string
          example: "3500S"
        startTime:
          description: Departure time at origin.
          type: string
          format: date-time
        endTime:
          description: Arrival time at destination
          type: string
          format: date-time
        transfers:
          description: Number of interchanges
          type: number
          format: integer
          minimum: 0
        distance:
          description: Trip distance
          type: number
          format: integer
          minimum: 0
        tripLegs:
          description: Legs ot the trip
          type: array
          items:
            $ref: "#/components/schemas/TripLeg"
        operatingDays:
          $ref: "#/components/schemas/OperatingDayz"
        # Out of scope
        # situationFullRef:
        #   $ref: "#/components/schemas/SituationFullRef"
        tripStatus:   # Ask Stefan
          $ref: "#/components/schemas/TripStatus"
 
    ## CHECKED
    TripSummary:
      description: A complete trip from origin to destination
      required:
        - tripId
      type: object
      properties:
        tripId:
          description: >-
            Id of this trip for referencing purposes. Unique within trip response.
          type: string
          format: uuid
        origin:
          description: >-
            Specifies the origin situation from where the user wants to start.
          $ref: "#/components/schemas/PlaceContext"
        destination:
          description: >-
            Specifies the destination situation where the user is heading to.
          $ref: "#/components/schemas/PlaceContext"
        duration:
          description: Overall duration of the trip
          type: string
          format: duration
          example: "3600S"
        startTime:
          description: Departure time at origin.
          type: string
          format: date-time
        endTime:
          description: Arrival time at destination
          type: string
          format: date-time
        ptTripLegs:
          description: Number of public transport trip legs
          type: integer
          minimum: 0
        distance:
          description: Trip distance
          type: number
          format: integer
          minimum: 0
        operatingDays:
          $ref: "#/components/schemas/OperatingDayz"
        # Out of scope
        # situationFullRef:
        #   $ref: "#/components/schemas/SituationFullRef"

    ## CHECKED
    OperatingDayz:
      allOf:
        - $ref: "#/components/schemas/OperatingDays"
        - type: object
          properties:
            operatingDaysDescription:
              type: string

    ## CHECKED
    OperatingDays:
      description: >-
         day of public transport operation of which the characteristics are defined in a specific SERVICE CALENDAR 
         and which may last more than 24 hours.
      type: object
      properties:
        from:
          description: Start date of period.
          type: string
          format: date
          example: "2021-06-25"
        to:
          description: End date of period.
          type: string
          format: date
          example: "2021-06-30"
        pattern:
          description: >-
            Bit pattern for operating days between start date and end date. The length of the pattern is equal to the number
            of days from start date to end date. A bit value of "1" indicates that an event actually happens on the day that
            is represented by the bit position.
          type: string
          pattern: '^[01]+$'
          example: "101101"
      required:
        - from
        - to
        - pattern

    TripStatus:  
      type: object
      properties:
        unplanned:
          description: Whether this trip is an additional one that has not been planned.
          type: boolean
          default: false
        canceled:
          description: Whether this trip is cancelled and will not be run.
          type: boolean
          default: false
        deviation:
          description: Whether this trip deviates from the planned service pattern.
          type: boolean
          default: false
        delayed:
          description: Whether this trip is delayed.
          type: boolean
          default: false
        infeasible:
          description: Whether this trip cannot be used, due to operational delays and impossible transfers.
          type: boolean
          default: false
        
    TripLeg:
      description: trip leg
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/TimedLegStructure"
            - $ref: "#/components/schemas/TransferLegStructure"
            - $ref: "#/components/schemas/ContinuousLegStructure"
        - type: object
          properties:
            legId:
              description: Id of this trip leg. Unique within trip result.
              type: string
              format: uuid
            # participantRef:   # out of scope
            #   description: IT system that is participating in a communication with other participant(s)
            #   type: string

    TimedLegStructure:
      type: object
      properties:
        timedLeg:
          $ref: "#/components/schemas/TimedLeg"
      required:
        - timedLeg

    TimedLeg:
      description: >-
        A leg which is bound to a timetabled schedule. Corresponds to a RIDE.
      required:
        - legAlight
        - legBoard
        - service
      type: object
      properties:
        legBoard:
          $ref: "#/components/schemas/LegBoard"
        legIntermediates:
          type: array
          items:
            $ref: "#/components/schemas/LegIntermediate"
        legAlight:
          $ref: "#/components/schemas/LegAlight"
        service:
          $ref: "#/components/schemas/DatedJourney"
        # legAttribute:   # out of scope
        #   type: array
        #  items:
        #    $ref: "#/components/schemas/LegAlight"
        operatingDays: # hack
          $ref: "#/components/schemas/OperatingDays"
        # legTrack:   # out of scope
        #   type: array
        #  items:
        #    $ref: "#/components/schemas/LegTrack"

    TransferLegStructure:
      type: object
      properties:
        transferLeg:
          $ref: "#/components/schemas/TransferLeg"
      required:
        - transferLeg

    TransferLeg:
      description: >-
        A leg which links other legs of a trip where a transfer between different locations is required.
      required:
        - legStart
        - legEnd
        - timeWindow
        - transferMode
      type: object
      properties:
        transferMode:
          $ref: "#/components/schemas/TransferMode"
        legStart:
          description: Stop/Station where boarding is done
          $ref: "#/components/schemas/PlaceRef"
        legEnd:
          description: Stop/Station to alight
          $ref: "#/components/schemas/PlaceRef"
        # timeWindow:   # out of scope
        #  $ref: "#/components/schemas/TimeWindow"
        duration:
          description: Overall duration or this interchange.
          type: string
          format: duration
          example: "3600S"

    ContinuousLegStructure:
      type: object
      properties:
        continuousLeg:
          $ref: "#/components/schemas/ContinuousLeg"
      required:
        - ContinuousLeg

    ContinuousLeg:
      description: >-
        A leg of a journey that is not bound to a timetable.
      required:
        - legStart
        - legEnd
        - service
        - timeWindow
        - transferMode
      type: object
      properties:
        legStart:
          description: Stop/Station where boarding is done
          $ref: "#/components/schemas/PlaceRef"
        legEnd:
          description: Stop/Station to alight
          $ref: "#/components/schemas/PlaceRef"
        service:
          $ref: "#/components/schemas/ContinuousService"
        # timeWindow:  # out of scope
        #  $ref: "#/components/schemas/TimeWindow"
        duration:
          description: >-
            Duration of this leg according to user preferences like walk speed.
          type: string
          format: duration
          example: "1800S"

    ContinuousService:
      description: >-
        Service of this leg. May be "walk" in most cases, but also cycling or taxi etc.
      type: object
      required:
        - operatingDayRef
        - journeyRef
        - mode
        - publishedServiceName
        - originText
        - destinationText
      properties:
        continuousMode: # FIXME: should be one of
          $ref: "#/components/schemas/ContinuousMode"
        individualMode: # FIXME: should be one of
          $ref: "#/components/schemas/IndividualMode"
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        journeyRef:
          $ref: "#/components/schemas/JourneyRef"
        mode: # Ask Stefan
          type: string
          example: "Ask Stefan"
        publishedServiceName:
          type: string
          example: "Circle Line"
        originText:
          type: string
        destinationText:
          type: string

    ContinuousMode:
      description: >-
        Types of modes that run at any time without a timetable.
      type: string
      enum:
        - WALK
        - DEMAND_RESPONSIVE
        - REPLACEMENT_SERVICE
      default: WALK
    
    IndividualMode:
      description: Modes which an individual powers themselves (such as walk, cycle).
      type: string
      enum:
        - WALK 
        - CYCLE
        - TAXI
        - SELF_DRIVE_CAR
        - OTHERS_DRIVE_CAR
        - MOTORCYCLE
        - TRUCK
        - SCOOTER
        - RIDE_POOL_CAR
        - CAR_SHARING
        - CYCLE_SHARING
        - SCOOTER_SHARING
      default: WALK
      
    TransferMode:
      description: Modes dedicated to perform transfers.
      type: string
      enum:
        - WALK
        - PARK_AND_RIDE
        - BIKE_AND_RIDE
        - CAR_HIRE
        - BIKE_HIRE
        - PROTECTED_CONNECTION
        - GUARANTEED_CONNECTION
        - REMAIN_IN_VEHICLE
        - CHANGE_WITHIN_VEHICLE
        - CHECK_IN
        - CHECK_OUT
      default: WALK

    LegBoard:
      description: Stop/Station where boarding is done
      required:
        - stopPointRef
        - stopPointName
        - serviceDeparture  
      type: object
      properties:
        stopPointRef:
          $ref: "#/components/schemas/StopPointRef"
        stopPointName:
          type: string
          example: Zug
        nameSuffix:
          description: >-
            Additional description of the stop point that may be appended to the 
            name if enough space is available. F.e. "opposite main entrance".
          type: string
        plannedQuay:
          description: >-
            Name of the bay where to board the vehicle. According to planned timetable.
          type: string
          example: "4"
        estimatedQuay:
          description: >-
            Name of the bay where to board the vehicle. As to the latest realtime status.
          type: string
          example: "8"
        serviceDeparture:
          $ref: "#/components/schemas/ServiceDeparture"
        order:
          type: number
          format: int
          example: 12

    LegIntermediate:
      description: Stop/Station to alight
      required:
        - order
        - plannedQuay
        - serviceArrival
        - stopPointName
        - stopPointRef
      type: object
      properties:
        stopPointRef:
          $ref: "#/components/schemas/StopPointRef"
        stopPointName:
          type: string
          example: Luzern
        plannedQuay:
          description: >-
            Name of the bay where to board/alight from the vehicle. According to 
            planned timetable.
          type: string
          example: "3"
        serviceArrival:
          $ref: "#/components/schemas/ServiceArrival"
        serviceDeparture:
          $ref: "#/components/schemas/ServiceDeparture"
        order:
          type: number
          format: int
          example: 12

    LegAlight:
      description: Stop/Station to alight
      required:
        - serviceArrival
        - stopPointName
        - stopPointRef
      type: object
      properties:
        stopPointRef:
          $ref: "#/components/schemas/StopPointRef"
        stopPointName:
          type: string
          example: Luzern
        nameSuffix:
          description: >-
            Additional description of the stop point that may be appended to the 
            name if enough space is available. F.e. "opposite main entrance".
          type: string
        plannedQuay:
          description: >-
            Name of the bay where to alight from the vehicle. According to planned timetable.
          type: string
          example: "3"
        estimatedQuay:
          description: >-
            Name of the bay where to alight from the vehicle. As to the latest realtime status.
          type: string
          example: "8"
        serviceArrival:
          $ref: "#/components/schemas/ServiceArrival"
        order:
          type: number
          format: int
          example: 12

    ServiceArrival:
      description: >-
        Describes the departure situation at this leg board stop point (group of attributes
        of TIMETABLED PASSING TIME, ESTIMATED PASSING TIME, OBSERVED PASSING TIME).
      allOf: # Easy fix: Inline Service Time
        - $ref: "#/components/schemas/ServiceTime"  
        # - $ref: "#/components/schemas/EstimatedTimeBand"   #Out of scope

    ServiceDeparture:
      description: >-
        Describes the departure situation at this leg board stop point (group of attributes
        of TIMETABLED PASSING TIME, ESTIMATED PASSING TIME, OBSERVED PASSING TIME).
      allOf: # Easy fix: Inline Service Time
        - $ref: "#/components/schemas/ServiceTime"
        # - $ref: "#/components/schemas/EstimatedTimeBand"   #Out of scope

    ServiceTime:
      type: object
      required:
        - timetabledTime
      properties:
        timetabledTime:
          type: string
          format: date-time
        estimatedTime:
          type: string
          format: date-time
        observedTime:
          type: string
          format: date-time

    DatedJourney:
      description: >-
        Passenger carrying VEHICLE JOURNEY for one specified DAY TYPE for which the pattern of working 
        is in principle defined by a SERVICE JOURNEY PATTERN. DatedJourney details of a service include
        its operating days.
      required:
        - operatingDayRef
        - journeyRef
        - mode
        - publishedServiceName
      type: object
      properties:
        ### Other attributes are out of scope
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        journeyRef:
          $ref: "#/components/schemas/JourneyRef"
        mode:
          $ref: "#/components/schemas/Mode"
        productCategory:
          $ref: "#/components/schemas/ProductCategory"
        publishedServiceName:
          description: >-
            Line name or service description as known to the public, f.e. "512", "S8"
            or "Circle Line" or "ICE 488".
          type: string
          example: S1
        trainNumber:
          description: >-
            If several TrainNumber types exist, use the commercial number.
          type: string
          example: 1
        operatorRef:
          description: Reference to transport operator
          type: string
          example: ojp:11

    ## CHECKED
    Mode:
      description: A method of transportation such as bus, rail, etc.
      required:
        - ptMode
      type: object
      properties:
        # Out of Scope
        # ptMode:
        #   $ref: "#/components/schemas/PTModeChoiceGroup"
        name:
          description: Name of the mode
          type: string
          example: rail
        shortName:
          description: Short name or acronym of the mode
          type: string
          example: S
        description:
          description: Additional text that further describes the mode
          type: string

    ## CHECKED
    ProductCategory:
      description: >-
        Product category based on NeTEx/SIRI. A product category is a classification for VEHICLE JOURNEYs
        to express some common properties of journeys for marketing and fare products.
      required:
        - name
        - shortName
        - productCategoryRef
      properties:
        name:
          description: >-
            Full name of this product category, e.g. "Autoreisezug" in Switzerland or "Train Grand Vitessee".
          type: string
          example: Autoreisezug
        shortName:
          description: >-
            Short name or acronym of the product category, likely to be published, e.g. "ARZ", "TGV"
          type: string
          example: ARZ
        productCategoryRef:
          $ref: "#/components/schemas/ProductCategoryRef"

    ## CHECKED
    Place:
      description: Model of a place
      allOf:
      - oneOf:
        - $ref: "#/components/schemas/AddressStructure"
        - $ref: "#/components/schemas/PointOfInterestStructure"
        - $ref: "#/components/schemas/StopPlaceStructure"
        - $ref: "#/components/schemas/StopPointStructure"
#        - $ref: "#/components/schemas/TopographicPlaceStructure"
      - $ref: "#/components/schemas/GeoPositionStructure"
      - type: object
        properties:
          name:
            type: string
            example: Zürich HB
        #  attribute:   # Out of scope
        #   $ref: "#/components/schemas/GeneralAttribute"
        #  extension:   # Out of scope
        #   $ref: "#/components/schemas/Extension"

    AddressStructure:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/Address"
      required:
        - address

    ## CHECKED
    Address:
      description: Model of an address
      allOf:
      - type: object
        required:
          - addressCode
          - addressName
        properties:
          addressCode:
            description: ID of this address.
            type: string
            example: NL:1916200000022621
          privateCode:
            description: Code of this address in private/foreign/proprietary coding schemes.
            $ref: "#/components/schemas/PrivateCode"
          addressName:
            description: Name or description of address for use in passenger information.
            type: string
            example: Oude Trambaan 7, 2265CA Leidschendam, Nederland
          nameSuffix:
            description: House number of the address. If none is given, either a crossing street can be given, or the whole street is meant.
            type: string
      - $ref: "#/components/schemas/AddressDetail"

    ## TODO
    TopographicPlaceRef:
      type: string
      example: NL:1621

    ## CHECKED
    AddressDetail:
      description: Model of an address
      type: object
      properties:
        countryName:
          description: "Country of the address."
          type: string
          example: The Netherlands
        postCode:
          description: "Postal code of the address."
          type: string
          example: 2265CA
        topographicPlaceName:
          description: "TopographicPlace name of the address. If set it should at least contain the city name."
          type: string
          example: Leidschendam
        topographicPlaceRef:
          description: If at least one is set, only place objects within the given localities are allowed.If at least one is set, only place objects within the given localities are allowed.Reference to a TopographicPlace
          $ref: "#/components/schemas/TopographicPlaceRef"
        street:
          description: Street name of the address.
          type: string
          example: Oude Trambaan
        houseNumber:
          description: House number of the address. If none is given, either a crossing street can be given, or the whole street is meant.
          type: string
          example: 7
        crossRoad:
          description: Crossing. This can be used to be more specific without using house numbers.
          type: string


    PointOfInterestStructure:
      type: object
      properties:
        pointOfInterest:
          $ref: "#/components/schemas/PointOfInterest"
      required:
        - pointOfInterest

    ## CHECKED
    PointOfInterest:
      description: Model of a POI
      type: object
      required:
        - pointOfInterestCode
        - pointOfInterestName
      properties:
        pointOfInterestCode:
          description: ID of this Point of Interest.
          type: string
        pointOfInterestName:
          description: Name or description of point of interest for use in passenger information.
          type: string
          example: Park Rozenrust
        nameSuffix:
          description: Additional description of the point of interest that may be appended to the name if enough space is available. F.e. "Exhibition Center".
          type: string
        pointOfInterestCategory:          
          description: Categories this POI is associated with. Order indicates descending relevance.
          $ref: "#/components/schemas/PointOfInterestCategory"
        privateCode:
          description: Code of this address in private/foreign/proprietary coding schemes.
          $ref: "#/components/schemas/PrivateCode"
        topographicPlaceRef:
          description: If at least one is set, only place objects within the given localities are allowed.If at least one is set, only place objects within the given localities are allowed.Reference to a TopographicPlace
          $ref: "#/components/schemas/TopographicPlaceRef"

    PointOfInterestCategory:
      description: a view of POINT OF INTEREST CLASSIFICATION in TMv6 categorisation of POINTs OF INTEREST in respect of the activities undertaken at them (defined by key-value-pairs).
      oneOf:
        - $ref: "#/components/schemas/OsmTag"
        - type: object
          properties:
            pointOfInterestClassification:
              description: Classification of the POI (when it is not from OSM). The codification of the classification Id may include de codification source (for example "IGN:[classificationCode]")
              type: string

    OsmTagStructure:
      type: object
      properties:
        osmTag:
          $ref: "#/components/schemas/OsmTag"
      required:
        - osmTag

    ## CHECKED
    OsmTag:
      description: Structure of an Open Street Map tag.
      type: object
      properties:
        tag:
          type: string
          description: Name of Open Street Map tag (amenity, leisure, tourism, bike, ...)
          example: name
        value:
          type: string
          description: Value for Open Street Map tag (charging_station, hostel, yes, ...)
          example: Rozenrust
      required:
        - tag
        - value

    StopPlaceStructure:
      type: object
      properties:
        stopPlace:
          $ref: "#/components/schemas/StopPlace"
      required:
        - stopPlace

    ## CHECKED
    StopPlace:
      description: Model of a stop place
      allOf:
        - type: object
          required:
            - privateCode
            - stopPlaceName
            - stopPlaceRef
          properties:
            stopPlaceRef:
              description: Reference to a Stop Place
              $ref: "#/components/schemas/StopPlaceRef"
            stopPlaceName:
              description: Name of this stop place for use in passenger information.
              type: string
              example: Zürich HB
            nameSuffix:
              description: Additional description of the stop place that may be appended to the name if enough space is available.
              type: string
              example: Exhibition Center
            privateCode:
              description: Code of this stop place in private/foreign/proprietary coding schemes.
              $ref: "#/components/schemas/PrivateCode"
            topographicPlaceRef:
              description: If at least one is set, only place objects within the given localities are allowed.If at least one is set, only place objects within the given localities are allowed.Reference to a TopographicPlace
              $ref: "#/components/schemas/TopographicPlaceRef"
        - $ref: "#/components/schemas/StopAttributes"

    ## CHECKED
    StopAttributes:
      type: object
      properties:
        wheelchairAccessible:
          description: Whether this stop is accessible for wheelchair users.
          type: boolean
        lighting:
          description: Whether this stop is lit.
          type: boolean
        covered:
          description: Whether this stop offers protection from weather conditions like rain, snow, storm etc.
          type: boolean

    StopPointStructure:
      type: object
      properties:
        stopPoint:
          $ref: "#/components/schemas/StopPoint"
      required:
        - stopPoint

    ## CHECKED
    StopPoint:
      description: an extended view of SCHEDULED STOP POINT in TMv6 a SCHEDULED STOP POINT extended by ACCESSIBILITY LIMITATION attributes and with identifier and name where passengers can board or alight from vehicles
      allOf:
        - type: object
          required:
            - stopPlaceRef
            - stopPointName
          properties:
            stopPointRef:
              $ref: "#/components/schemas/StopPointRef"
            stopPointName:
              description: Name or description of stop point for use in passenger information.
              type: string
            nameSuffix:
              description: Additional description of the stop point that may be appended to the name if enough space is available.
              example: opposite main entrance
              type: string
            plannedQuay:
              description: Name of the bay where to board/alight from the vehicle. According to planned timetable.
              type: string
            estimatedQuay:
              description: Name of the bay where to board/alight from the vehicle. As to the latest realtime status.
              type: string
            privateCode:
              description: Code of this stop point in private/foreign/proprietary coding schemes.
              $ref: "#/components/schemas/PrivateCode"
            parentRef:
              description: Reference to the stop place to which this stop point belongs.
              $ref: "#/components/schemas/StopPlaceRef"
            topographicPlaceRef:
              description: If at least one is set, only place objects within the given localities are allowed.If at least one is set, only place objects within the given localities are allowed.Reference to a TopographicPlace
              $ref: "#/components/schemas/TopographicPlaceRef"
        - $ref: "#/components/schemas/StopAttributes"

    ## CHECKED
    PrivateCode:
      description: Code of this stop point in private/foreign/proprietary coding schemes.
      type: object
      properties:
        system:
          type: string
          example: EFA
        value:
          type: string
          example: "6373080"
      required:
        - system
        - value

    ## CHECKED
    LocationStructure:
      description: WGS84 coordinates position
      type: object
      properties:
        longitude:
          $ref: "#/components/schemas/Longitude"
        latitude:
          $ref: "#/components/schemas/Latitude"
        altitude:
          $ref: "#/components/schemas/Altitude"
      required:
        - latitude
        - longitude

    ## CHECKED
    Longitude:
      description: >-
        Longitude from Greenwich Meridian. -180 (West) to +180 (East). Decimal degrees. eg 2.356
      type: number
      format: float
      example: 8.54021
      minimum: -180.0
      maximum: 180.0

    ## CHECKED
    Latitude:
      description: >-
        Latitude from equator. -90 (South) to +90 (North). Decimal degrees. eg 56.356
      type: number
      format: float
      example: 47.37818
      minimum: -90.0
      maximum: 90.0

    ## CHECKED
    Altitude:
      description: Altitude metres from sea level.
      type: number
      format: float
      example: 0.0

    # References
    ## CHECKED
    StopPointRef:
      description: Reference to a (SCHEDULED) STOP POINT
      type: string
      example: "8503000"

    ## CHECKED
    StopPlaceRef:
      description: Reference to a Stop Place
      type: string
      example: "8503000"

    ## CHECKED
    PointOfInterestRef:
      description: Reference to a Point of Interest
      type: string
      example: "8503000"

    ## CHECKED
    AddressRef:
      description: Reference to an Address
      type: string
      example: "1234567"

    ## CHECKED
    ProductCategoryRef:
      description: >-
        A reference to the product category. This is the internal code used within the reference frameworks (NeTEx, SIRI). 
        It is usually not displayed, but interpreted by the technical system, e.g. "ch:1:TypeOfProductCategory:ARZ" 
        (Autoreisezug in Switzerland) or "ch:1:TypeOfProductCategory:BAV".
      type: string
      example: "ch:1:TypeOfProductCategory:ARZ"

    ## CHECKED
    OperationDayRef:
      description: Reference to an operating day
      type: string
      example: "OperatingDay:12345"

    ## CHECKED
    JourneyRef:
      description: Reference to a journey
      type: string
      example: "ServiceJourney:1"

    # Problem for HTTP APIs (RFC 7807)

    Problem:
      type: object
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/probs/passenger-too-young"
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.
