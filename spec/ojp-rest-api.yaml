openapi: 3.0.3
info:
  title: OJP REST API
  description: The Open Journey Planner (OJP) as a REST service.
  contact:
    name: Andreas Schlapbach
    email: andreas.schlapbach@sbb.ch
    url: https://github.com/schlpbch/ojp-rest-api
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.5
tags:
  - name: Place Information
    description: resource to search for place information (aka. location)
  - name: Trips
    description: resource to search for trips
paths:
  /place-informations:
    post:
      tags:
        - Place Information
      summary: returns trips for a given OJP place information request
      description: >-
        Returns place information for a given place information request based on the OJP specification.
      operationId: postPlaceInformations
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/accessToken"
        - name: ParentSpanId
          in: header
          description: >-
            64-bit parent span ID lower-hex encoded into 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: SpanId
          in: header
          description: >-
            64-bit span ID lower-hex encoded into 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: TraceId
          in: header
          description: >-
            128 or 64-bit trace ID lower-hex encoded into 32 or 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string

      requestBody:
        description: request for place information
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PlaceInformationRequest"
      responses:
        "200":
          description: place information found matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PlaceInformationResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no place information found
        "500":
          description: internal server error
          content:
            "application/problem+json":
              schema:
                $ref: "#/components/schemas/Problem"
        "501":
          description: not implemented
        "503":
          description: service unavailable
  /trips:
    post:
      tags:
        - Trips
      summary: returns trips for a given OJP trip request
      description: >-
        Returns trips for a given trip request based on the OJP specification.
      operationId: postTrips
      parameters:
        - $ref: "#/components/parameters/acceptLanguage"
        - $ref: "#/components/parameters/accessToken"
        - name: ParentSpanId
          in: header
          description: >-
            64-bit parent span ID lower-hex encoded into 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: SpanId
          in: header
          description: >-
            64-bit span ID lower-hex encoded into 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: TraceId
          in: header
          description: >-
            128 or 64-bit trace ID lower-hex encoded into 32 or 16 characters
          required: true
          style: simple
          explode: false
          schema:
            type: string

      requestBody:
        description: request for trips
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TripRequest"
      responses:
        "200":
          description: trips found matching criteria
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TripResponse"
        "400":
          description: bad input parameter
        "401":
          description: unauthorized
        "403":
          description: forbidden
        "404":
          description: no trips found
        "500":
          description: internal server error
          content:
            "application/problem+json":
              schema:
                $ref: "#/components/schemas/Problem"
        "501":
          description: not implemented
        "503":
          description: service unavailable

components:
  parameters:
    acceptLanguage:
      name: Accept-Language
      in: header
      description: >-
        Describes the set of natural languages that are preferred for localized text in
        the response to the request (see RFC2616-sec14.4).
      required: false
      style: simple
      explode: false
      schema:
        type: string

    accessToken:
      name: Access-Token
      in: header
      description: >-
        OAuth2 token used to authenticate the consumer API. Refer to the implementation
        documentation for information on how to get a token.
      required: true
      style: simple
      explode: false
      schema:
        type: string

  schemas:
    PlaceInformationRequest: ## OJP Place Information
      allOf:
        - oneOf: 
          - $ref: "#/components/schemas/InitialInput"
          - $ref: "#/components/schemas/PlaceRef"
        - type: object
          properties:
            restrictions:
              $ref: "#/components/schemas/PlaceParam"

    PlaceParam:
      description: >-
        More parameters for restricting the request.
      allOf:
#        - $ref: "#/components/schemas/PlaceDataFilter"   # Out of scope
        - $ref: "#/components/schemas/PlacePolicy"
        
    PlacePolicy:
      properties:
        #language:   # Not supported, language shall be set in header
        #  type: string
        numberOfResults:
          description: >-
            Maximum number of results to be returned. The service is allowed to return fewer objects if reasonable
            or otherwise appropriate.
          type: number
          format: int
        #continueAt:   # Out of scope
        #  type: number
        #  format: int
        #includePtModes:    # Out of scope
        #  type: boolean

    InitialInput:
      required:
        - initialInput
        - placeRef
      type: object
      properties:
        initialInput:
          anyOf:
            - $ref: "#/components/schemas/InputName"
            - $ref: "#/components/schemas/GeoPosition"
  #         - $ref: "#/components/schemas/GeoRestriction"   # Out of scope
  #         - $ref: "#/components/schemas/AllowedSystemId"    # Out of scope

    InputName:
      description: >-
        Name of the place object which is looked after. This is usually the user's input. If not given,
        the name of the resulting place objects is not relevant.
      type: string
      example: "Bern Bärengraben"

    PlaceInformationResponse:
      type: object
      properties:
        # placeInformationResponseContext:   # Out of scope
        #   $ref: "#/components/schemas/PlaceContext"
        # continueAt:   # Ouf of scope
        #   type: string
        placeResults:
          type: array
          items:
            $ref: "#/components/schemas/PlaceResult"

    PlaceResult:
      type: object
      required:
        - results
        - complete
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Place"
        complete:
          description: >-
            States whether the included place is complete or needs further refinement. Only complete places
            are fully resolved and can be used in e.g. trip requests. Incomplete places have to be refined 
            entering them once again into a PlaceInformationRequest.
          type: boolean
        probability:
          description: >-
            Probability, that this result is the one meant by the user's input. Value should be between 0 and 1.
          type: number
          format: float
        modes:
          description:
            List of transport modes that call at this place object. This list should only be filled in case of
            stop points or stop places – and only when explicitly requested.
          type: array
          items:
            $ref: "#/components/schemas/Mode"

    ## TripRequest

    TripRequest: 
      required:
        - destination
        - origin
      type: object
      properties:
        origin:
          description: >-
            Specifies the origin situation from where the user wants to start.
          $ref: "#/components/schemas/PlaceContext"
        destination:
          description: >-
            Specifies the destination situation where the user is heading to.
          $ref: "#/components/schemas/PlaceContext"
        via:
          description: >-
            Ordered series of points where the journey must pass through. If more
            than one via point is given all of them must be obeyed - in the correct
            order. The server is allowed to replace a via stop by equivalent stops.
          type: array
          items:
            $ref: "#/components/schemas/TripVia"
        # notVia:   # Out of scope
        #   description: >-
        #     Not-via restrictions for a TRIP, i.e. SCHEDULED STOP POINTs or STOP PLACEs
        #     that the TRIP is not allowed to pass through. If more than one not via point 
        #     is given all of them must be obeyed.
        #   oneOf:
        #     - $ref: "#/components/schemas/StopPointRef"
        #     - $ref: "#/components/schemas/StopPlaceRef"
        # noChangesAt:   # Out of scope
        #   description: >-
        #     No-change-at restrictions for a TRIP, i.e. SCHEDULED STOP POINTs or STOP PLACEs 
        #     at which no TRANSFER is allowed within a TRIP
        #   oneOf:
        #     - $ref: "#/components/schemas/StopPointRef"
        #     - $ref: "#/components/schemas/StopPlaceRef"
        params:
          description: >-
            Options to control the search behaviour and response contents.
          $ref: "#/components/schemas/TripParam"

    PlaceContext:
      type: object
      allOf:
        - oneOf:
          - $ref: "#/components/schemas/PlaceRef"
          - $ref: "#/components/schemas/TripPlace"
        - type: object
          properties:
            depArrTime:
              type: string
              format: date-time
            # timeAllowance:   # Out of scope
            #  type: string
            #individualTransportOptions:   # Out of scope
            #  $ref: "#/components/schemas/IndividualTransportOptions"

    PlaceRef:
      description: >-
        Reference to a geographic PLACE of any type which may be specified as the origin or destination of a trip.
      allOf:
        - oneOf:
          - $ref: "#/components/schemas/StopPointRef"
          - $ref: "#/components/schemas/StopPlaceRef"
          - $ref: "#/components/schemas/GeoPosition"
          - $ref: "#/components/schemas/TopographicPlaceRef"
          - $ref: "#/components/schemas/PointOfInterestRef"
          - $ref: "#/components/schemas/AddressRef"
        - type: object
          properties:
            name:
              type: string
              example: Bern

    TripVia:
      description: >-
        Via restriction for a trip.
      required:
        - viaPoint 
      properties:
        viaPoint:
          $ref: "#/components/schemas/PlaceRef"
        dwellTime:
          type: string
          format: duration

    TripPlace:
      description: >-
        A trip place represents the current logical position of a journey service. It can be 
        used similarly to a place e.g. for starting a new trip requests from within this service. 
        A trip place does not(!) describe the relative position of a traveller within a vehicle, 
        e.g. the seat.
      type: object
      required:
        - operatingDayRef
        - journeyRef
      properties:
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        journeyRef:
          $ref: "#/components/schemas/JourneyRef"

    TripParam:
      description: 
        Options to control the search behaviour and response contents.
      type: object
      required:
        - numberOfResultsBefore
        - numberOfResultsAfter
      properties:
        ### Other attributes are out of scope
        levelEntrance:
          description: >-
            The user needs vehicles with level entrance between platform and vehicle, f.e. 
            for wheelchair access.
          type: boolean
          default: false
        bikeTransport:
          description: >-
            The user wants to carry a bike on public transport.
          type: boolean
          default: false
        walkSpeed:
          description: >-
            Deviation from average walk speed in percent. 100% percent is average speed. 
            Less than 100 % slower, Greater than 150% faster.
          type: number
          format: int
          default: 100
        additionalTransferTime:
          description: >-
            Additional time added to all transfers (also to transfers between individual to
            public transport).
          type: string
          format: duration
        numberOfResultsBefore:
          type: number
          format: int32
          default: 0
        numberOfResultsAfter:
          type: number
          format: int32
          default: 5

    ## Trip Response

    TripResponse:
      required:
        - tripResult
      type: object
      properties:
        tripResult:
          $ref: "#/components/schemas/TripResult"

    TripResult:
      description: The trip results found by the server
      type: object
      properties:
        resultId:
          description: >-
            Id of this trip result for referencing purposes. Unique within trip response.
          type: string
          format: uuid
        trip:
          $ref: "#/components/schemas/Trip"
        # tripSummary:   # Out of scope
        #  $ref: "#/components/schemas/TripSummary"
        # tripFare:  # Out of Scope
        #  $ref: "#/components/schemas/TripFare"

    Trip:
      description: A complete trip from origin to destination
      required:
        - tripId
        - duration
        - startTime
        - endTime
        - transfers
        - tripLegs
      type: object
      properties:
        tripId:
          description: >-
            Id of this trip for referencing purposes. Unique within trip response.
          type: string
          format: uuid
        duration:
          description: Overall duration of the trip
          type: string
          example: to specify
        startTime:
          description: Departure time at origin.
          type: string
          format: date-time
        endTime:
          description: Arrival time at destination
          type: string
          format: date-time
        transfers:
          description: Number of interchanges
          type: number
          format: integer
          minimum: 0
        distance:
          description: Trip distance
          type: number
          format: integer
          minimum: 0
        tripLegs:
          description: Legs ot the trip
          type: array
          items:
            $ref: "#/components/schemas/TripLeg"
        operatingDays:   # Ask Stefan
          $ref: "#/components/schemas/OperatingDayz"
        tripStatus:   # Ask Stefan
          $ref: "#/components/schemas/TripStatus"
 
    OperatingDayz:  # FIXME
      type: object
      properties:
        operatingDays:
          $ref: "#/components/schemas/OperatingDays"
        operatingDayDescription:
          type: string
        # situationFullRef:   #Out of scope
        #  $ref:  "#/components/schemas/SituationFullRef"        

    OperatingDays:
      description: >-
         day of public transport operation of which the characteristics are defined in a specific SERVICE CALENDAR 
         and which may last more than 24 hours.
      type: object
      properties:
        from:
          description: Start date of period.
          type: string
          format: date
        to:
          description: End date of period.
          type: string
          format: date
        pattern:
          description: >-
            Bit pattern for operating days between start date and end date. The length of the pattern is equal to the number
            of days from start date to end date. A bit value of "1" indicates that an event actually happens on the day that
            is represented by the bit position.
          type: string

    TripStatus:  
      type: object
      properties:
        unplanned:
          type: boolean
          default: false
        canceled:
          type: boolean
          default: false
        deviation:
          type: boolean
          default: false
        delayed:
          type: boolean
          default: false
        infeasible:
          type: boolean
          default: false
        
    TripLeg:
      description: trip leg
      allOf:
        - oneOf:
            - $ref: "#/components/schemas/TimedLeg"
            - $ref: "#/components/schemas/TransferLeg"
            - $ref: "#/components/schemas/ContinuousLeg"
        - type: object
          properties:
            legId:
              description: Id of this trip leg. Unique within trip result.
              type: string
              format: uuid
            # participantRef:   # out of scope
            #   description: IT system that is participating in a communication with other participant(s)
            #   type: string

    TimedLeg:
      description: ToDo
      required:
        - legAlight
        - legBoard
        - service
      type: object
      properties:
        legBoard:
          $ref: "#/components/schemas/LegBoard"
        legIntermediates:
          type: array
          items:
            $ref: "#/components/schemas/LegIntermediate"
        legAlight:
          $ref: "#/components/schemas/LegAlight"
        service:
          $ref: "#/components/schemas/DatedJourney"
        # legAttribute:   # out of scope
        #   type: array
        #  items:
        #    $ref: "#/components/schemas/LegAlight"
        operatingDays: # hack
          $ref: "#/components/schemas/OperatingDayz"
        # legTrack:   # out of scope
        #   type: array
        #  items:
        #    $ref: "#/components/schemas/LegTrack"

    TransferLeg:
      description: >-
        [A specialized type of NAVIGATION PATH in TMv6] description of a LEG which links
        other LEGs of a TRIP where a TRANSFER between different LOCATIONs is required.
      required:
        - legStart
        - legEnd
        - timeWindow
        - transferMode
      type: object
      properties:
        transferMode:
          $ref: "#/components/schemas/TransferMode"
        legStart:
          description: Stop/Station where boarding is done
          $ref: "#/components/schemas/PlaceRef"
        legEnd:
          description: Stop/Station to alight
          $ref: "#/components/schemas/PlaceRef"
        # timeWindow:   # out of scope
        #  $ref: "#/components/schemas/TimeWindow"
        duration:
          description: Overall duration or this interchange.
          type: string
          format: duration

    ContinuousLeg:
      description: >-
        Leg of a journey that is not bound to a timetable.
      required:
        - legStart
        - legEnd
        - service
        - timeWindow
        - transferMode
      type: object
      properties:
        legStart:
          description: Stop/Station where boarding is done
          $ref: "#/components/schemas/PlaceRef"
        legEnd:
          description: Stop/Station to alight
          $ref: "#/components/schemas/PlaceRef"
        service:
          $ref: "#/components/schemas/ContinuousService"
        # timeWindow:  # out of scope
        #  $ref: "#/components/schemas/TimeWindow"
        duration:
          description: >-
            Duration of this leg according to user preferences like walk speed.
          type: string
          format: duration

    ContinuousService:
      description: >-
        Service of this leg. May be "walk" in most cases, but also cycling or taxi etc.
      type: object
      required:
        - operatingDayRef
        - journeyRef
        - mode
        - publishedServiceName
        - originText
        - destinationText
      properties:
        continuousMode: # FIXME: should be one of
          $ref: "#/components/schemas/ContinuousMode"
        individualMode: # FIXME: should be one of
          $ref: "#/components/schemas/IndividualMode"
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        journeyRef:
          $ref: "#/components/schemas/JourneyRef"
        mode: # Ask Stefan
          type: string
          example: "Ask Stefan"
        publishedServiceName:
          type: string
          example: "Circle Line"
        originText:
          type: string
        destinationText:
          type: string

    ContinuousMode:
      description: >-
        Types of modes that run at any time without a timetable.
      type: string
      enum:
        - WALK
        - DEMAND_RESPONSIVE
        - REPLACEMENT_SERVICE
      default: WALK
    
    IndividualMode:
      description: Modes which an individual powers themselves (such as walk, cycle).
      type: string
      enum:
        - WALK 
        - CYCLE
        - TAXI
        - SELF_DRIVE_CAR
        - OTHERS_DRIVE_CAR
        - MOTORCYCLE
        - TRUCK
        - SCOOTER
        - RIDE_POOL_CAR
        - CAR_SHARING
        - CYCLE_SHARING
        - SCOOTER_SHARING
      default: WALK
      
    TransferMode:
      description: Modes dedicated to perform transfers.
      type: string
      enum:
        - WALK
        - PARK_AND_RIDE
        - BIKE_AND_RIDE
        - CAR_HIRE
        - BIKE_HIRE
        - PROTECTED_CONNECTION
        - GUARANTEED_CONNECTION
        - REMAIN_IN_VEHICLE
        - CHANGE_WITHIN_VEHICLE
        - CHECK_IN
        - CHECK_OUT
      default: WALK

    LegBoard:
      description: Stop/Station where boarding is done
      required:
        - stopPointRef
        - stopPointName
        - serviceDeparture  
      type: object
      properties:
        stopPointRef:
          $ref: "#/components/schemas/StopPointRef"
        stopPointName:
          type: string
          example: Zug
        nameSuffix:
          description: >-
            Additional description of the stop point that may be appended to the 
            name if enough space is available. F.e. "opposite main entrance".
          type: string
        plannedQuay:
          description: >-
            Name of the bay where to board the vehicle. According to planned timetable.
          type: string
          example: "4"
        estimatedQuay:
          description: >-
            Name of the bay where to board the vehicle. As to the latest realtime status.
          type: string
          example: "8"
        serviceDeparture:
          $ref: "#/components/schemas/ServiceDeparture"
        order:
          type: number
          format: int
          example: 12

    LegIntermediate:
      description: Stop/Station to alight
      required:
        - order
        - plannedQuay
        - serviceArrival
        - stopPointName
        - stopPointRef
      type: object
      properties:
        stopPointRef:
          $ref: "#/components/schemas/StopPointRef"
        stopPointName:
          type: string
          example: Luzern
        plannedQuay:
          description: >-
            Name of the bay where to board/alight from the vehicle. According to 
            planned timetable.
          type: string
          example: "3"
        serviceArrival:
          $ref: "#/components/schemas/ServiceArrival"
        serviceDeparture:
          $ref: "#/components/schemas/ServiceDeparture"
        order:
          type: number
          format: int
          example: 12

    LegAlight:
      description: Stop/Station to alight
      required:
        - serviceArrival
        - stopPointName
        - stopPointRef
      type: object
      properties:
        stopPointRef:
          $ref: "#/components/schemas/StopPointRef"
        stopPointName:
          type: string
          example: Luzern
        nameSuffix:
          description: >-
            Additional description of the stop point that may be appended to the 
            name if enough space is available. F.e. "opposite main entrance".
          type: string
        plannedQuay:
          description: >-
            Name of the bay where to alight from the vehicle. According to planned timetable.
          type: string
          example: "3"
        estimatedQuay:
          description: >-
            Name of the bay where to alight from the vehicle. As to the latest realtime status.
          type: string
          example: "8"
        serviceArrival:
          $ref: "#/components/schemas/ServiceArrival"
        order:
          type: number
          format: int
          example: 12

    ServiceArrival:
      description: >-
        Describes the departure situation at this leg board stop point (group of attributes
        of TIMETABLED PASSING TIME, ESTIMATED PASSING TIME, OBSERVED PASSING TIME).
      allOf:
        - $ref: "#/components/schemas/ServiceTime"  
        # - $ref: "#/components/schemas/EstimatedTimeBand"   #Out of scope

    ServiceDeparture:
      description: >-
        Describes the departure situation at this leg board stop point (group of attributes
        of TIMETABLED PASSING TIME, ESTIMATED PASSING TIME, OBSERVED PASSING TIME).
      allOf:
        - $ref: "#/components/schemas/ServiceTime"
        # - $ref: "#/components/schemas/EstimatedTimeBand"   #Out of scope

    ServiceTime:
      type: object
      required:
        - timetabledTime
      properties:
        timetabledTime:
          type: string
          format: date-time
        estimatedTime:
          type: string
          format: date-time
        observedTime:
          type: string
          format: date-time

    DatedJourney:
      description: >-
        Passenger carrying VEHICLE JOURNEY for one specified DAY TYPE for which the pattern of working 
        is in principle defined by a SERVICE JOURNEY PATTERN. DatedJourney details of a service include
        its operating days.
      required:
        - operatingDayRef
        - journeyRef
        - mode
        - publishedServiceName
      type: object
      properties:
        ### Other attributes are out of scope
        operatingDayRef:
          $ref: "#/components/schemas/OperationDayRef"
        journeyRef:
          $ref: "#/components/schemas/JourneyRef"
        mode:
          $ref: "#/components/schemas/Mode"
        productCategory:
          $ref: "#/components/schemas/ProductCategory"
        publishedServiceName:
          description: >-
            Line name or service description as known to the public, f.e. "512", "S8"
            or "Circle Line" or "ICE 488".
          type: string
          example: S1
        trainNumber:
          description: >-
            If several TrainNumber types exist, use the commercial number.
          type: string
          example: 1
        operatorRef:
          description: Reference to transport operator
          type: string
          example: ojp:11

    Mode:
      description: A method of transportation such as bus, rail, etc.
      required:
        - ptMode
      type: object
      properties:
        ptMode:
          $ref: "#/components/schemas/PTModeChoiceGroup"
        name:
          description: Name of the mode
          type: string
          example: Zug
        shortName:
          description: Short name or acronym of the mode
          type: string
          example: S
        description:
          description: Additional text that further describes the mode
          type: string

    PTModeChoiceGroup:
      description: Public transport sub modes.
      type: string
      enum:
        - AIR_SUB_MODE
        - BUS_SUB_MODE
        - COACH_SUB_MODE
        - FUNICULAR_SUB_MODE
        - METRO_SUB_MODE
        - TRAM_SUB_MODE
        - TELECABIN_SUB_MODE
        - RAIL_SUB_MODE
        - WATER_SUB_MODE
      default: RAIL_SUB_MODE

    ProductCategory:
      description: >-
        Product category based on NeTEx/SIRI. A product category is a classification for VEHICLE JOURNEYs
        to express some common properties of journeys for marketing and fare products.
      required:
        - name
        - shortName
        - productCategoryRef
      properties:
        name:
          description: >-
            Full name of this product category, e.g. "Autoreisezug" in Switzerland or "Train Grand Vitessee".
          type: string
          example: Autoreisezug
        shortName:
          description: >-
            Short name or acronym of the product category, likely to be published, e.g. "ARZ", "TGV"
          type: string
          example: ARZ
        productCategoryRef:
          $ref: "#/components/schemas/ProductCategoryRef"

    Place:
      description: Model of a place
      allOf:
      - oneOf:
        - $ref: "#/components/schemas/Address"
        - $ref: "#/components/schemas/PointOfInterest"
        - $ref: "#/components/schemas/StopPlace"
        - $ref: "#/components/schemas/StopPoint"
        - $ref: "#/components/schemas/TopographicPlace"
      - type: object
        properties:
          name:
            type: string
            example: Zürich HB
          geoPosition:
            $ref: "#/components/schemas/GeoPosition"
        #  attribute:   # Out of scope
        #   $ref: "#/components/schemas/GeneralAttribute"
        #  extension:   # Out of scope
        #   $ref: "#/components/schemas/Extension"

    Address:
      description: Model of an address
      type: string
      default: todo

    PointOfInterest:
      description: Model of a POI
      type: string
      default: todo

    StopPlace:
      description: Model of a stop place
      required:
        - privateCode
        - stopPlaceName
        - stopPlaceRef
      type: object
      properties:
        stopPlaceRef:
          $ref: "#/components/schemas/StopPlaceRef"
        stopPlaceName:
          type: string
          example: Zürich HB
        privateCode:
          $ref: "#/components/schemas/PrivateCode"
        topographicPlaceRef:
          $ref: "#/components/schemas/TopographicPlaceRef"

    StopPoint:
      description: Model of a stop point
      type: string
      default: todo

    TopographicPlace:
      description: TopographicPlace. Region, village, or city.
      type: string
      default: todo

    PrivateCode:
      description: Code of this stop point in private/foreign/proprietary coding schemes.
      required:
        - system
        - value
      type: object
      properties:
        system:
          type: string
          example: EFA
        value:
          type: string
          example: "6373080"

    GeoPosition:
      description: WGS84 coordinates position
      required:
        - latitude
        - longitude
      type: object
      properties:
        longitude:
          $ref: "#/components/schemas/Longitude"
        latitude:
          $ref: "#/components/schemas/Latitude"
        precision:
          description: precision for point measurement in meters
          type: number
          format: integer

    Longitude:
      description: >-
        Longitude from Greenwich Meridian. -180 (West) to +180 (East). Decimal degrees. eg 2.356
      type: number
      format: float
      example: 8.54021

    Latitude:
      description: >-
        Latitude from equator. -90 (South) to +90 (North). Decimal degrees. eg 56.356
      type: number
      format: float
      example: 47.37818

    # References

    StopPointRef:
      description: Reference to a (SCHEDULED) STOP POINT
      type: string
      example: "8503000"

    StopPlaceRef:
      description: Reference to a Stop Place
      type: string
      example: "8503000"

    TopographicPlaceRef:
      description: Reference to a TopographicPlace
      type: string
      example: 23036261:27

    PointOfInterestRef:
      description: Reference to a Point of Interest
      type: string
      example: "8503000"

    AddressRef:
      description: Reference to an Address
      type: string
      example: Segantinistrasse 7, 3006 Bern

    ProductCategoryRef:
      description: >-
        A reference to the product category. This is the internal code used within the reference frameworks (NeTEx, SIRI). 
        It is usually not displayed, but interpreted by the technical system, e.g. "ch:1:TypeOfProductCategory:ARZ" 
        (Autoreisezug in Switzerland) or "ch:1:TypeOfProductCategory:BAV".
      type: string
      example: "ch:1:TypeOfProductCategory:ARZ"

    OperationDayRef:
      description: Reference to an operating day
      type: string
      format: date

    JourneyRef:
      description: Reference to a journey
      type: string
      example: toDo

    # Problem for HTTP APIs (RFC 7807)

    Problem:
      type: object
      description: >-
        Problem Details for HTTP APIs (RFC 7807) defines a "problem detail" as a way
        to carry machine-readable details of errors in a HTTP response to avoid
        the need to define new error response formats for HTTP APIs.
        See: https://tools.ietf.org/html/rfc7807
      properties:
        type:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the problem type. When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: "about:blank"
          example: "https://example.com/probs/passenger-too-young"
        title:
          type: string
          description: >-
            A short, summary of the problem type. Written in English and readable
            for engineers (usually not suited for non technical stakeholders and
            not localized); example: Service Unavailable
        status:
          type: integer
          format: int32
          description: >-
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: >-
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: >-
            An absolute URI that identifies the specific occurrence of the problem.
